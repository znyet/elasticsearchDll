先来一个标准分词（standard），配置如下：
curl -XPUT localhost:9200/local -d '{
    "settings" : {
        "analysis" : {
            "analyzer" : {
                "stem" : {
                    "tokenizer" : "standard",
                    "filter" : ["standard", "lowercase", "stop", "porter_stem"]
                }
            }
        }
    },
    "mappings" : {
        "article" : {
            "dynamic" : true,
            "properties" : {
                "title" : {
                    "type" : "string",
                    "analyzer" : "stem"
                }
            }
        }
    }
}'
index:local

type:article

default analyzer:stem (filter:小写、停用词等)

field:title　　

测试：

# Sample Analysis
curl -XGET localhost:9200/local/_analyze?analyzer=stem -d '{Fight for your life}'
curl -XGET localhost:9200/local/_analyze?analyzer=stem -d '{Bruno fights Tyson tomorrow}'
  
# Index Data
curl -XPUT localhost:9200/local/article/1 -d'{"title": "Fight for your life"}'
curl -XPUT localhost:9200/local/article/2 -d'{"title": "Fighting for your life"}'
curl -XPUT localhost:9200/local/article/3 -d'{"title": "My dad fought a dog"}'
curl -XPUT localhost:9200/local/article/4 -d'{"title": "Bruno fights Tyson tomorrow"}'
  
# search on the title field, which is stemmed on index and search
curl -XGET localhost:9200/local/_search?q=title:fight
  
# searching on _all will not do anystemming, unless also configured on the mapping to be stemmed...
curl -XGET localhost:9200/local/_search?q=fight
例如：

1
Fight for your life
分词如下：


{"tokens":[
{"token":"fight","start_offset":1,"end_offset":6,"type":"<ALPHANUM>","position":1},<br>{"token":"your","start_offset":11,"end_offset":15,"type":"<ALPHANUM>","position":3},<br>{"token":"life","start_offset":16,"end_offset":20,"type":"<ALPHANUM>","position":4}
]}
　　

 

部署ik分词器：

1）将ik分词器插件（es）拷贝到./plugins/analyzerIK/中

2）在elasticsearch.yml中配置

index.analysis.analyzer.ik.type : "ik"

3）在config中添加./config/ik

IKAnalyzer.cfg.xml

main.dic

quantifier.dic

ext.dic

stopword.dic

 

delete之前创建的index，重新配置如下：


curl -XPUT localhost:9200/local -d '{
    "settings" : {
        "analysis" : {
            "analyzer" : {
                "ik" : {
                    "tokenizer" : "ik"
                }
            }
        }
    },
    "mappings" : {
        "article" : {
            "dynamic" : true,
            "properties" : {
                "title" : {
                    "type" : "string",
                    "analyzer" : "ik"
                }
            }
        }
    }
}'
　　

测试：


curl 'http://localhost:9200/index/_analyze?analyzer=ik&pretty=true' -d' 
{ 
    "text":"中华人民共和国国歌" 
} 
' 
{
  "tokens" : [ {
    "token" : "text",
    "start_offset" : 12,
    "end_offset" : 16,
    "type" : "ENGLISH",
    "position" : 1
  }, {
    "token" : "中华人民共和国",
    "start_offset" : 19,
    "end_offset" : 26,
    "type" : "CN_WORD",
    "position" : 2
  }, {
    "token" : "国歌",
    "start_offset" : 26,
    "end_offset" : 28,
    "type" : "CN_WORD",
    "position" : 3
  } ]
}
　　

 ---------------------------------------

如果我们想返回最细粒度的分词结果，需要在elasticsearch.yml中配置如下：


index:
  analysis:
    analyzer:
      ik:
          alias: [ik_analyzer]
          type: org.elasticsearch.index.analysis.IkAnalyzerProvider
      ik_smart:
          type: ik
          use_smart: true
      ik_max_word:
          type: ik
          use_smart: false
　　

 测试：


curl 'http://localhost:9200/index/_analyze?analyzer=ik_max_word&pretty=true' -d' 
{ 
    "text":"中华人民共和国国歌" 
} 
' 
{
  "tokens" : [ {
    "token" : "text",
    "start_offset" : 12,
    "end_offset" : 16,
    "type" : "ENGLISH",
    "position" : 1
  }, {
    "token" : "中华人民共和国",
    "start_offset" : 19,
    "end_offset" : 26,
    "type" : "CN_WORD",
    "position" : 2
  }, {
    "token" : "中华人民",
    "start_offset" : 19,
    "end_offset" : 23,
    "type" : "CN_WORD",
    "position" : 3
  }, {
    "token" : "中华",
    "start_offset" : 19,
    "end_offset" : 21,
    "type" : "CN_WORD",
    "position" : 4
  }, {
    "token" : "华人",
    "start_offset" : 20,
    "end_offset" : 22,
    "type" : "CN_WORD",
    "position" : 5
  }, {
    "token" : "人民共和国",
    "start_offset" : 21,
    "end_offset" : 26,
    "type" : "CN_WORD",
    "position" : 6
  }, {
    "token" : "人民",
    "start_offset" : 21,
    "end_offset" : 23,
    "type" : "CN_WORD",
    "position" : 7
  }, {
    "token" : "共和国",
    "start_offset" : 23,
    "end_offset" : 26,
    "type" : "CN_WORD",
    "position" : 8
  }, {
    "token" : "共和",
    "start_offset" : 23,
    "end_offset" : 25,
    "type" : "CN_WORD",
    "position" : 9
  }, {
    "token" : "国",
    "start_offset" : 25,
    "end_offset" : 26,
    "type" : "CN_CHAR",
    "position" : 10
  }, {
    "token" : "国歌",
    "start_offset" : 26,
    "end_offset" : 28,
    "type" : "CN_WORD",
    "position" : 11
  } ]
}

curl -XPUT localhost:9200/local -d '{
    "settings" : {
        "analysis" : {
            "analyzer" : {
                "stem" : {
                    "tokenizer" : "standard",
                    "filter" : ["standard", "lowercase", "stop", "porter_stem"]
                }
            }
        }
    },
    "mappings" : {
        "article" : {
            "dynamic" : true,
            "properties" : {
                "title" : {
                    "type" : "string",
                    "analyzer" : "stem"
                }
            }
        }
    }
}'
  
# Sample Analysis
curl -XGET localhost:9200/local/_analyze?analyzer=stem -d '{Fight for your life}'
curl -XGET localhost:9200/local/_analyze?analyzer=stem -d '{Bruno fights Tyson tomorrow}'
  
# Index Data
curl -XPUT localhost:9200/local/article/1 -d'{"title": "Fight for your life"}'
curl -XPUT localhost:9200/local/article/2 -d'{"title": "Fighting for your life"}'
curl -XPUT localhost:9200/local/article/3 -d'{"title": "My dad fought a dog"}'
curl -XPUT localhost:9200/local/article/4 -d'{"title": "Bruno fights Tyson tomorrow"}'
  
# search on the title field, which is stemmed on index and search
curl -XGET localhost:9200/local/_search?q=title:fight
  
# searching on _all will not do anystemming, unless also configured on the mapping to be stemmed...
curl -XGET localhost:9200/local/_search?q=fight
　　

 

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
curl -XPUT http://localhost:9200/test_index/ -d '
{
    "index": {
        "analysis": {
            "analyzer": {
                "index_analyzer": {
                    "tokenizer": "nGram",
                    "filter": ["lowercase", "snowball"]
                },
                "search_analyzer": {
                    "tokenizer": "nGram",
                    "filter": ["lowercase", "snowball"]
                }
            },
            "filter": {
                "snowball": {
                    "type": "snowball",
                    "language": "English"
                }
            }
        }
    }
}'
  
curl -XPUT 'http://localhost:9200/test_index/item/_mapping' -d '
{
    "item": {
      "properties": {
        "title": {
          "type": "string",
          "boost": 2.0,
          "index": "analyzed",
          "store": "yes",
          "term_vector" : "with_positions_offsets"
        },
        "description": {
          "type": "string",
          "boost": 1.0,
          "index": "analyzed",
          "store": "yes",
          "term_vector" : "with_positions_offsets"
        },
        "link": {
          "type": "string"
        }
      }
    }
}'
　　

 

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
# curl -XDELETE http://localhost:9200/test-index
  
# "analyzer"."default" => default name for index and search
# "tokenizer" : "standard" => splits words at punctuation characters
# http://www.elasticsearch.org/guide/reference/index-modules/analysis/
  
curl -XPUT http://localhost:9200/test-index/ -d '
{
    "index": {
        "analysis": {
            "analyzer": {
                "default": {
                    "tokenizer": "standard",
                    "filter": ["lowercase", "snowball"]
                }
            }
        }
    }
}'
  
  
# http://www.elasticsearch.org/guide/reference/api/search/highlighting.html
# "store": "yes" => enable highlighting
# "term_vector" : "with_positions_offsets" => for performance
  
curl -XPUT http://localhost:9200/test-index/test-item/_mapping -d '
{
    "test-item": {
        "properties": {
            "name": {
                "type": "string",
                "store": "yes",
                "term_vector": "with_positions_offsets"
            },
            "description": {
                "type": "string",
                "store": "yes",
                "term_vector": "with_positions_offsets"
            },
            "field-without-highlighting": {
                "type": "string"
            }
        }
    }
}'
  
  
curl -XPUT http://localhost:9200/test-index/test-item/1 -d '
{
    "name": "Example One",
    "description": "Create a test item for to the index.",
    "field-without-highlighting": "test"
}'
  
  
# "highlight" => wrap search result in <em> tags (define own tags with pre_tags/post_tags)
# "number_of_fragments": 0 => don"t split field in multiple fragments
# http://www.elasticsearch.org/guide/reference/api/search/highlighting.html
  
curl -XGET http://localhost:9200/test-index/test-item/_search?pretty=true -d '
{
    "highlight": {
        "fields": {
            "name": {
                "number_of_fragments": 0
            },
            "description": {
                "number_of_fragments": 0
            }
        }
    },
    "query": {
        "query_string": {
            "fields": ["name", "description"],
            "query": "test"
        }
    }
}'
  
=>
  
{
    "took": 4,
    "timed_out": false,
    "_shards": {
        "total": 5,
        "successful": 5,
        "failed": 0
    },
    "hits": {
        "total": 1,
        "max_score": 0.029424578,
        "hits": [{
            "_index": "test-index",
            "_type": "test-item",
            "_id": "1",
            "_score": 0.029424578,
            "_source": {
                "name": "Example One",
                "description": "Create a test item for to the index.",
                "field-without-highlighting": "test"
            },
            "highlight": {
                "description": ["Create a <em>test</em> item for to the index."]
            }
        }]
    }
}
  
curl -XGET http://localhost:9200/test-index/test-item/_search?pretty=true -d '
{
    "highlight": {
        "fields": {
            "name": {
                "number_of_fragments": 0
            },
            "description": {
                "number_of_fragments": 0
            }
        }
    },
    "query": {
        "query_string": {
            "fields": ["name", "description"],
            "query": "created EXAMPLES"
        }
    }
}'
  
=>
  
{
    "took": 6,
    "timed_out": false,
    "_shards": {
        "total": 5,
        "successful": 5,
        "failed": 0
    },
    "hits": {
        "total": 1,
        "max_score": 0.06241896,
        "hits": [{
            "_index": "test-index",
            "_type": "test-item",
            "_id": "1",
            "_score": 0.06241896,
            "_source": {
                "name": "Example One",
                "description": "Create a test item for to the index.",
                "field-without-highlighting": "test"
            },
            "highlight": {
                "description": ["<em>Create</em> a test item for to the index."],
                "name": ["<em>Example</em> One"]
            }
        }]
    }
}
===========================================
FACET

1)Terms Facet

1
2
3
4
5
6
7
8
9
10
11
12
13
{
    "query" : {
        "match_all" : {  }
    },
    "facets" : {
        "tag" : {
            "terms" : {
                "field" : "tag",
                "size" : 10
            }
        }
    }
}
被统计（facet）的字段一般不分词（例如商品的类目字段――类目唯一），但也支持分词后term不多的字段（例如商品的标签字段）。　　

对应这种facet我们主要关注几点：

facet的字段（field,multi fields）

facet返回的数量（top N）

facet排序（count,term,reverse_count,reverse_term）

facet作用范围（all terms,excluding terms,regex patterns,term script）

 

2)Range Facets

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
{
    "query" : {
        "match_all" : {}
    },
    "facets" : {
        "range1" : {
            "range" : {
                "field" : "field_name",
                "ranges" : [
                    { "to" : 50 },
                    { "from" : 50, "to" : 70 },
                    { "from" : 70, "to" : 120 },
                    { "from" : 120 }
                ]
            }
        }
    }
}
例如：

商品的价格区间。

考虑下面一种需求：

统计各个价格区间购买次数。（每个商品有个销量字段）

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
{
    "query" : {
        "match_all" : {}
    },
    "facets" : {
        "range1" : {
            "range" : {
                "key_field" : "price",
                "value_field" : "volume",
                "ranges" : [
                    { "to" : 50 },
                    { "from" : 50, "to" : 70 },
                    { "from" : 70, "to" : 120 },
                    { "from" : 120 }
                ]
            }
        }
    }
}
 

3)Histogram Facet

实现直方图的效果，其实也算是range的一种。

1
2
3
4
5
6
7
8
9
10
11
12
13
{
    "query" : {
        "match_all" : {}
    },
    "facets" : {
        "histo1" : {
            "histogram" : {
                "field" : "field_name",
                "interval" : 100
            }
        }
    }
}
interval可以理解为步长。除了number型还有time_interval。　　

 

4）Date Histogram Facet

 

 

5)Filter Facets

1
2
3
4
5
6
7
8
9
{
    "facets" : {
        "wow_facet" : {
            "filter" : {
                "term" : { "tag" : "wow" }
            }
        }
    }
}
返回命中“指定filter”的结果数。

 

6）Query Facets

1
2
3
4
5
6
7
8
9
{
    "facets" : {
        "wow_facet" : {
            "query" : {
                "term" : { "tag" : "wow" }
            }
        }
    }
}
Q:FilterFacets VS. QueryFacets?

 

7)Statistical Facet

1
2
3
4
5
6
7
8
9
10
11
12
{
    "query" : {
        "match_all" : {}
    },
    "facets" : {
        "stat1" : {
            "statistical" : {
                "field" : "num1"
            }
        }
    }
}
StatisticalFacet需要作用在数值型字段上面，他会统计总数、总和、最值、均值等。

 

 8)Terms stats Facet

1
2
3
4
5
6
7
8
9
10
11
12
13
{
    "query" : {
        "match_all" : {  }
    },
    "facets" : {
        "tag_price_stats" : {
            "terms_stats" : {
                "key_field" : "tag",
                "value_field" : "price"
            }
        }
    }
}
也是一个kv的统计，例如统计某某类目下价格的分布情况（最值、均值等）。

 

9）GEO distance Facet

 

--------------------------------------------------

 javaClient Demo:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
public void facet() {
        SearchResponse sr = client.prepareSearch()
                .setQuery(QueryBuilders.matchAllQuery())
                .addFacet(FacetBuilders.termsFacet("f1").field("price"))
                .execute().actionGet();
 
        // Get your facet results
        TermsFacet f = (TermsFacet) sr.getFacets().facetsAsMap().get("f1");
 
        System.out.println(f.getTotalCount()); // Total terms doc count
        System.out.println(f.getOtherCount()); // Not shown terms doc count
        System.out.println(f.getMissingCount()); // Without term doc count
 
        // For each entry
        for (TermsFacet.Entry entry : f) {
            System.out.println("t:" + entry.getTerm()); // Term
            System.out.println("c:" + entry.getCount()); // Doc count
            System.out.println("----");
        }
    }